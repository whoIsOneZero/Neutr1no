"""import vulners
from colorama import init, Fore
from threading import Lock
from queue import Queue
from network import os_discovery


# some colors
init()
GREEN = Fore.GREEN
RESET = Fore.RESET
GRAY = Fore.LIGHTBLACK_EX
RED = Fore.LIGHTRED_EX
# number of threads
N_THREADS = 100
# thread queue
q = Queue()
print_lock = Lock()

services = os_discovery()


def vulnerability_scan(service):
    all_vulnerabilities = []
    # vulners_api = vulners.VulnersApi(api_key="Insert your API key here")
    vulners_api = vulners.VulnersApi(
        api_key="03Q0WGSQXVJUMU8F49RAENCJY1RBXJGK0HCAG12P3R5W0LE98LYKI4BY11JCP08J")

    for service in services:
        print(f"\n\nVulnerabilities found for service: {service}\n\n")
        vulnerabilities = []

        try:
            # Search for vulnerabilities using the Vulners API
            results = vulners_api.find_exploit_all(service)
            filtered_results = [
                result for result in results if service in result['description']]

            # Check if vulnerabilities were found
            if filtered_results:
                for result in filtered_results:
                    vulnerability = {
                        "CVE ID": result.get('id'),
                        "Title": result.get('title'),
                        "Description": result.get('description'),
                        "Severity": result.get('cvss'),
                        "CVSS Score": result.get('cvss', {}).get('score', 'N/A')
                    }
                    vulnerabilities.append(vulnerability)

                    # Print vulnerability details
                    print(f"{GRAY}[+] CVE ID: {result.get('id')}{RESET}")
                    print(f"{GREEN}- Title: {result.get('title')} {RESET}")
                    print(
                        f"{GREEN}- Description: {result.get('description')}{RESET}")
                    print(
                        f"{RED}- CVSS Score: {vulnerability.get('CVSS Score', 'N/A')}{RESET}")
            else:
                print("No vulnerabilities found for this service.")
        except Exception as e:
            print(
                f"Error searching for vulnerabilities for service {service}:", e)

    return all_vulnerabilities
"""

import vulners


def vulnerability_scan(services):
    vulners_api = vulners.VulnersApi(api_key="Insert your API key here")
    all_vulnerabilities = []

    for service in services:
        print(f"\n\nVulnerabilities found for service: {service}\n\n")
        try:
            results = vulners_api.find_exploit_all(service)
            filtered_results = [
                result for result in results if service in result['description']]

            if filtered_results:
                for result in filtered_results:
                    vulnerability = {
                        "CVE ID": result.get('id'),
                        "Title": result.get('title'),
                        "Description": result.get('description'),
                        "CVSS Score": result.get('cvss', {}).get('score', 'N/A')
                    }
                    all_vulnerabilities.append(vulnerability)
                    print(f"[+] CVE ID: {result.get('id')}")
                    print(f"- Title: {result.get('title')}")
                    print(f"- Description: {result.get('description')}")
                    print(
                        f"- CVSS Score: {vulnerability.get('CVSS Score', 'N/A')}")
            else:
                print(f"No vulnerabilities found for {service}")
        except Exception as e:
            print(
                f"Error searching for vulnerabilities for service {service}: {e}")

    return all_vulnerabilities
